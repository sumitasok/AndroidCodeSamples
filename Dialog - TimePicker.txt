				showDialog(TIMEPICKER_DIALOG_ID);


---------------------------------------------------------------------------------------------------------------



	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case TIMEPICKER_DIALOG_ID:
			return new TimePickerDialog(this, mTimePickListener, hourOfDay,
					minute, is24HourView);
		default:
			break;
		}
		return null;
	}




----------------------------------------------------------------------------------------------------------------



	private TimePickerDialog.OnTimeSetListener mTimePickListener = new TimePickerDialog.OnTimeSetListener() {
		@Override
		public void onTimeSet(TimePicker view, int hourOfDay, int minutes) {
			// pass the returned Hour Minute values to parser method
			// and get the total hours and minutes
			// after which the alarm have to ring
			CurrentAlarmTimeManager parseTimePicker = new CurrentAlarmTimeManager();
			parseTimePicker.parseTimePicker(hourOfDay, minutes);

			int totalSeconds = parseTimePicker.TOTAL_HOURS * 60 * 60
					+ parseTimePicker.TOTAL_MINUTES * 60;

			Log.d(AlarmMe, "TimePickerDialog totalsSeconds to ring:"
					+ totalSeconds);
			int realSeconds = 0;
			String str = parseTimePicker.TOTAL_HOURS + ":"
					+ parseTimePicker.TOTAL_MINUTES + ":"
					+ Integer.toString(realSeconds);
			// realSeconds added to make str resemble sdf input string
			// requirement

			try {
				date = sdf.parse(str);
				Log.d("AlarmMe", "TPD-Hours " + date.getHours());
				Log.d("AlarmMe", "TPD-Minutes " + date.getMinutes());
				Log.d("AlarmMe", "TPD-Seconds" + date.getSeconds());
			} catch (ParseException e) {
				e.printStackTrace();
			}

			cda = new CountDownAlarm(totalSeconds * 1000, 1000, date);
			cda.start();
		}
	};

